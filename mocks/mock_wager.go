// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/wager.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "github.com/bluesky2106/fun-bet/models"
	serializers "github.com/bluesky2106/fun-bet/serializers"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIWagerService is a mock of IWagerService interface
type MockIWagerService struct {
	ctrl     *gomock.Controller
	recorder *MockIWagerServiceMockRecorder
}

// MockIWagerServiceMockRecorder is the mock recorder for MockIWagerService
type MockIWagerServiceMockRecorder struct {
	mock *MockIWagerService
}

// NewMockIWagerService creates a new mock instance
func NewMockIWagerService(ctrl *gomock.Controller) *MockIWagerService {
	mock := &MockIWagerService{ctrl: ctrl}
	mock.recorder = &MockIWagerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIWagerService) EXPECT() *MockIWagerServiceMockRecorder {
	return m.recorder
}

// PlaceWager mocks base method
func (m *MockIWagerService) PlaceWager(req *serializers.PlaceWagerReq) (*models.Wager, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlaceWager", req)
	ret0, _ := ret[0].(*models.Wager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PlaceWager indicates an expected call of PlaceWager
func (mr *MockIWagerServiceMockRecorder) PlaceWager(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlaceWager", reflect.TypeOf((*MockIWagerService)(nil).PlaceWager), req)
}

// BuyWager mocks base method
func (m *MockIWagerService) BuyWager(wagerID uint, req *serializers.BuyWagerReq) (*models.PurchaseOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyWager", wagerID, req)
	ret0, _ := ret[0].(*models.PurchaseOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuyWager indicates an expected call of BuyWager
func (mr *MockIWagerServiceMockRecorder) BuyWager(wagerID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyWager", reflect.TypeOf((*MockIWagerService)(nil).BuyWager), wagerID, req)
}

// ListWager mocks base method
func (m *MockIWagerService) ListWager(paging *serializers.PaginationReq) ([]*models.Wager, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWager", paging)
	ret0, _ := ret[0].([]*models.Wager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWager indicates an expected call of ListWager
func (mr *MockIWagerServiceMockRecorder) ListWager(paging interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWager", reflect.TypeOf((*MockIWagerService)(nil).ListWager), paging)
}

// ReadWager mocks base method
func (m *MockIWagerService) ReadWager(id uint) (*models.Wager, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadWager", id)
	ret0, _ := ret[0].(*models.Wager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadWager indicates an expected call of ReadWager
func (mr *MockIWagerServiceMockRecorder) ReadWager(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadWager", reflect.TypeOf((*MockIWagerService)(nil).ReadWager), id)
}
